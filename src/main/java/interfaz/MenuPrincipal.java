package interfaz;

import modelo.Matriz;
import controlador.*;

import java.util.ArrayList;
import javax.swing.JFrame;

/**
 * Vista de la interfaz grafica principal del programa
 * @author amaury
 */
public class MenuPrincipal extends JFrame {
    
    private Controlador controlador;

    /**
     * Creates new form MainMenu
     */
    public MenuPrincipal(Controlador controlador) {
        initComponents();
        this.controlador = controlador;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        editarMatrizBoton = new javax.swing.JButton();
        selectorMatriz = new javax.swing.JComboBox<>();
        selectorProcedimiento = new javax.swing.JComboBox<>();
        titulo1 = new javax.swing.JLabel();
        titulo2 = new javax.swing.JLabel();
        selectorMatriz1 = new javax.swing.JComboBox<>();
        selectorMatriz2 = new javax.swing.JComboBox<>();
        titulo3 = new javax.swing.JLabel();
        calcularBoton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        visualizadorMatrizR = new javax.swing.JTextArea();
        selectorEscalar = new javax.swing.JSpinner();
        labelOperacion = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        visualizadorMatrizE = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titulo.setText("CALCULADORA MATRICES");

        editarMatrizBoton.setText("Editar");
        editarMatrizBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarMatrizBotonActionPerformed(evt);
            }
        });

        selectorMatriz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F", "G", "H" }));
        selectorMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorMatrizActionPerformed(evt);
            }
        });

        selectorProcedimiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Suma de dos matrices", "Multiplicacion por Escalar", "Multiplicacion entre Matrices", "Inversa de Matriz por Gauss-Jordan", "Solucion Sistema de Ecuaciones por Gauss-Jordan", "Determinante de Matriz", "Solucion Sistema de Ecuaciones por Cramer", "Transpuesta de Matriz" }));
        selectorProcedimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorProcedimientoActionPerformed(evt);
            }
        });

        titulo1.setText("SELECCIONE MATRIZ PARA EDITAR");

        titulo2.setText("ESCOGER OPERACION");

        selectorMatriz1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F", "G", "H" }));

        selectorMatriz2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F", "G", "H" }));

        titulo3.setText("RESULTADO");

        calcularBoton.setText("CALCULAR");
        calcularBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularBotonActionPerformed(evt);
            }
        });

        visualizadorMatrizR.setEditable(false);
        visualizadorMatrizR.setColumns(20);
        visualizadorMatrizR.setRows(5);
        jScrollPane1.setViewportView(visualizadorMatrizR);

        selectorEscalar.setModel(new javax.swing.SpinnerNumberModel(0.0f, null, null, 1.0f));

        labelOperacion.setText("operacion");

        visualizadorMatrizE.setEditable(false);
        visualizadorMatrizE.setColumns(20);
        visualizadorMatrizE.setRows(5);
        jScrollPane2.setViewportView(visualizadorMatrizE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(titulo1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(titulo3, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(titulo2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(calcularBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectorMatriz1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelOperacion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectorMatriz2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectorEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(selectorProcedimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectorMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editarMatrizBoton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titulo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarMatrizBoton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titulo2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectorProcedimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorMatriz1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectorMatriz2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectorEscalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelOperacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcularBoton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titulo3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Retorna el elemento de la interfaz que es el selector de matriz 
     */
    public javax.swing.JComboBox<String> getSelectorMatriz()
    { return selectorMatriz; }

    /**
     * Retorna el elemento de la interfaz que es el selector de matriz para las operaciones.
     * En este caso es el primer selector que corresponde a la primera matriz (argumento)
     */
    public javax.swing.JComboBox<String> getSelectorMatriz1()
    { return selectorMatriz1; }

    /**
     * Retorna el elemento de la interfaz que es el selector de matriz para las operaciones.
     * En este caso es el segundo selector que corresponde a la segunda matriz (argumento)
     */
    public javax.swing.JComboBox<String> getSelectorMatriz2()
    { return selectorMatriz2; }

    /**
     * Retorna el elemento de la interfaz que es el selector de procedimiento a realizar.
     */
    public javax.swing.JComboBox<String> getSelectorProcedimiento()
    { return selectorProcedimiento; }

    /**
     * Retorna el elemento de la interfaz que es el selector de escalar. No es mucho un selector
     * pero igual se utiliza para especificar el escalar a utilizar en el procedimiento
     */
    public javax.swing.JSpinner getSelectorEscalar()
    { return selectorEscalar; }

    /**
     * Retorna el objeto controlador que creo la instancia de esta clase.
     */
    public Controlador getControlador()
    { return this.controlador; }

    //Delegado a la clase controlador
    private void editarMatrizBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarMatrizBotonActionPerformed
        // TODO add your handling code here:
        controlador.presionarBotonEditar();
    }//GEN-LAST:event_editarMatrizBotonActionPerformed

    //Delegado a la clase controlador
    private void calcularBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBotonActionPerformed
        // TODO add your handling code here:
        controlador.presionarBotonCalcular();
    }//GEN-LAST:event_calcularBotonActionPerformed

    //Delegado a la clase controlador
    private void selectorProcedimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorProcedimientoActionPerformed
        // TODO add your handling code here:
        controlador.procedimientoCambiado();
    }//GEN-LAST:event_selectorProcedimientoActionPerformed

    //Delegado a la clase controlador
    private void selectorMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorMatrizActionPerformed
        // TODO add your handling code here:
        controlador.matrizSeleccionadaCambiada();
    }//GEN-LAST:event_selectorMatrizActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal(controlador).setVisible(true);
            }
        });
    }
    
    /**
     * Dependiendo del procedimiento u operacion seleccionada, se ocultan
     * o se muestran los argumentos para que el usuario no se confunda de
     * cuales argumentos son los que importan.
     */
    public void mostrarArgumentosRelevantes(Controlador.Procedimiento procedimiento)
    {
        switch(procedimiento)
        {
            case SUMA:
                    labelOperacion.setText("+");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(true);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case MULTIPLICACION_ESCALAR:
                    labelOperacion.setText("*");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(true);
                    
                    calcularBoton.setVisible(true);
                break;
            case MULTIPLICACION_MATRIZ:
                    labelOperacion.setText("*");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(true);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case INVERSA_GJ:
                    labelOperacion.setText("^-1");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case SOLUCION_SISTEMA_GJ:
                    labelOperacion.setText("");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case DETERMINANTE:
                    labelOperacion.setText("det");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case SOLUCION_SISTEMA_CRAMER:
                    labelOperacion.setText("");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            case TRANSPRUESTA:
                    labelOperacion.setText("T");
                    selectorMatriz1.setVisible(true);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(true);
                break;
            default:
                    labelOperacion.setText("");
                    selectorMatriz1.setVisible(false);
                    selectorMatriz2.setVisible(false);
                    selectorEscalar.setVisible(false);
                    
                    calcularBoton.setVisible(false);
                break;
        }
    }
    
    /**
     * Previsualiza la matriz a editar en la interfaz grafica.
     * @param matriz MATRIZ La matriz a mostrar en la interfaz grafica.
     */
    public void previsualizarMatriz(Matriz matriz)
    {
        visualizadorMatrizE.setText("");
        ArrayList<String> visualizacion = matriz.mostrarElemento(-1, -1);
        for (int i = 0; i < visualizacion.size(); i++)
        {
            visualizadorMatrizE.setText(visualizadorMatrizE.getText() + visualizacion.get(i));
        }
    }
    
    /**
     * Muestra el resultado final de la operacion realizada
     * @param matriz MATRIZ La matriz obtenida del resultado.
     */
    public void mostrarResultadoMatriz(Matriz matriz)
    {
        visualizadorMatrizR.setText("");
        ArrayList<String> visualizacion = matriz.mostrarElemento(-1, -1);
        for (int i = 0; i < visualizacion.size(); i++)
        {
            visualizadorMatrizR.setText(visualizadorMatrizR.getText() + visualizacion.get(i));
        }
    }
    
    /**
     * Muestra el resultado final de la operacion realizada.
     * @param numero float El numero obtenido del resultado.
     */
    public void mostrarResultadoNumero(float numero)
    {
        visualizadorMatrizR.setText(""+numero);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcularBoton;
    private javax.swing.JButton editarMatrizBoton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelOperacion;
    private javax.swing.JSpinner selectorEscalar;
    private javax.swing.JComboBox<String> selectorMatriz;
    private javax.swing.JComboBox<String> selectorMatriz1;
    private javax.swing.JComboBox<String> selectorMatriz2;
    private javax.swing.JComboBox<String> selectorProcedimiento;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel titulo1;
    private javax.swing.JLabel titulo2;
    private javax.swing.JLabel titulo3;
    private javax.swing.JTextArea visualizadorMatrizE;
    private javax.swing.JTextArea visualizadorMatrizR;
    // End of variables declaration//GEN-END:variables
}
